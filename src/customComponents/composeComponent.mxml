<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300">
	
	<fx:Metadata>
		[Event(name="catchLogin", type="events.CatchLogin")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.object_proxy;
			import mx.validators.*;
			import events.*;
			
			[Bindable] public var emailContentAC:ArrayCollection = new ArrayCollection();
			[Bindable] public var sentContentAC:ArrayCollection = new ArrayCollection();
			[Bindable] public var usersAC:ArrayCollection = new ArrayCollection();
			
			[Bindable] private var nameOfUser:String;
			[Bindable] public var username:String;
			[Bindable] private var password:String;
			[Bindable] private var address:String;
			[Bindable] private var email:String;
			[Bindable] private var mobile:String;
			
			public var currentStateString:String;
			
			protected function sendButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var composeSending:XML=<data></data>;
				//Alert.show(username);
				composeSending.appendChild(<fields><uname>{username}</uname><subject>{subjectC.text}</subject><content>{contentC.text}</content><to>{toC.text}</to></fields>);
				var obj:Object={};
				obj.composeSending=composeSending;
				//Alert.show(inboxSending);
				compose_service.send(obj);
			}
			
			protected function compose_service_resultHandler(event:ResultEvent):void
			{
				// TODO Auto-generated method stub
				var resultXML:XML = XML(event.result);
				//Alert.show(resultXML.toString());
				//trace(resultXML);
				if(resultXML.success == "yes")
				{
					Alert.show("Email sent successfully!");
					//currentState = "inboxState";
					currentStateString = "inboxState";
					dispatchEvent(new CatchLogin(currentStateString));
				}
				else if(resultXML.success == "no")
				{
					Alert.show("Couldn't send email. Please try again.");
					//currentState="composeState";
					currentStateString = "composeState";
					dispatchEvent(new CatchLogin(currentStateString));
				}
			}
			
			protected function compose_service_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				Alert.show("compose mis-fired!");
			}
			
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<mx:HTTPService
			id="compose_service"
			result="compose_service_resultHandler(event)"
			fault="compose_service_faultHandler(event)"
			method="POST"
			url="./php/compose.php"
			useProxy="false"
			resultFormat="e4x">
		</mx:HTTPService>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Form width="100%" height="100%">
		<s:FormHeading label="Compose Mail" />
		<s:FormItem label="To" textAlign="left">
			<s:TextInput id="toC" width="100%"/>
		</s:FormItem>
		<s:FormItem label="CC" textAlign="left" >
			<s:TextInput id="ccC" maxChars="96" width="100%"/>
		</s:FormItem>
		<s:FormItem label="BCC" textAlign="left" >
			<s:TextInput id="bccC" maxChars="96" width="100%"/>
		</s:FormItem>
		<s:FormItem required="false" label="Subject" textAlign="left" >
			<s:TextInput id="subjectC" maxChars="128" width="100%"/>
		</s:FormItem>
		<s:FormItem label="Content" textAlign="left" >
			<s:TextArea id="contentC" width="100%"/>
		</s:FormItem>
		
		<s:FormItem>
			<!--<s:HBox>-->
			<s:Button id="sendButton" label="Send" click="sendButton_clickHandler(event)"/>
			<!--</s:HBox>-->
		</s:FormItem>
	</s:Form>
	
</s:Group>
